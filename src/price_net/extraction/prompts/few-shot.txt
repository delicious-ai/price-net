Your task is to analyze the price tag in the image and extract the relevant price information.
You must classify the price tag according to the categories defined below and return the information
as a JSON object that conforms to the `PriceOutput` type. Return only one `PriceOutput` object per image,
corresponding to the best matching price type.

```python
class PriceType(Enum):
    STANDARD = "STANDARD"                       # Single item normal price
    BULK_OFFER = "BULK_OFFER"                   # Buy multiple to get sale (3 for $5.00)
    BUY_X_GET_Y_FOR_Z = "BUY_X_GET_Y_FOR_Z"     # Buy X of a product to get an additional Y for $Z (could be 0 if free)
    UNKNOWN = "UNKNOWN"                         # Price tag is too blurry or otherwise unreadable
    MISC = "MISC"                               # The price tag does not clearly fall into one of these categories.
```

Here are the Pydantic models that define the structure of the JSON output:

```python
class StandardPrice(BaseModel):
    price_type: Literal[PriceType.STANDARD] = PriceType.STANDARD
    amount: float

class BulkOfferPrice(BaseModel):
    price_type: Literal[PriceType.BULK_OFFER] = PriceType.BULK_OFFER
    quantity: int
    total_price: float

class BuyXGetYForZPrice(Price):
    price_type: Literal[PriceType.BUY_X_GET_Y_FOR_Z] = PriceType.BUY_X_GET_Y_FOR_Z
    buy_quantity: int
    get_quantity: int
    get_price: float = 0.0

class UnknownPrice(BaseModel):
    price_type: Literal[PriceType.UNKNOWN] = PriceType.UNKNOWN

class MiscPrice(BaseModel):
    price_type: Literal[PriceType.MISC] = PriceType.MISC
    contents: str

PriceOutput = Union[StandardPrice, BulkOfferPrice, BuyXGetYForZPrice, UnknownPrice, MiscPrice]
```

**Examples of JSON Output:**


- Example 1 (Regular): If you see a price tag that reads "$3.99", return:

```json
{"price_type": "STANDARD", "amount": 3.99}
```

- Example 2 (Bulk Offer): If you see a price tag that reads "Buy 5 for $6.00" or "5 / $6.00", return:

```json
{"price_type": "BULK_OFFER", "quantity": 5, "total_price": 6.00}
```

- Example 3 (Buy X, Get Y for Z): If the price tag says something like "Buy 3, get 3 free", return:

```json
{"price_type": "BUY_X_GET_Y_FOR_Z", "buy_quantity": 3, "get_quantity": 3, "get_price": 0.00}
```

(if it had instead said something like "get 3 for $2.00", you would adjust the get_price)

- Example 4 (Misc): If the price tag does not cleanly fit into one of these categories, return:

```json
{"price_type": "MISC", "contents": "contents-here"}
```

- Example 5 (Unknown): If the price tag is unreadable, return:

```json
{"price_type": "UNKNOWN"}
```

You can assume that all prices are given in US dollars. If you see a price tag with only cents indicated, convert
it to dollars (e.g. 88¢ -> $0.88).

A product’s price will rarely exceed $99. If you see a price displayed without a decimal point, infer the correct decimal placement as follows:

- Example 1: $197 -> 1.97
- Example 2: $368 -> 3.68
- Example 3: $198 -> 1.98

This means that when you see a three-digit number like “$197”, it likely represents a price under $10 (i.e., $1.97), not one over $100.


Return only the JSON object, and ensure it is valid and conforms to one of the above models.

Focus on accurately extracting the relevant information from the image and mapping it to the correct fields. Do not
include any preamble or explanation. Remember, if you aren't sure, return `{"price_type": "UNKNOWN"}`. We would rather
not predict a price than potentially get it wrong if the image is too blurry, for example.