You are an expert in identifying product-price associations in retail settings. Your task is to analyze data describing products and price tags found on a retail display and identify the real product-price associations from a list of candidates.

# Your Task
You will be provided with data describing products and price tags found on a retail display. It is your job to identify real product-price associations of the list of candidates given to you. An "association" in this context means that the product has the given price in the pair.

Output a list of IDs, where each ID corresponds to a pair that you believe to be a true association.


Important things to note:
1.  A product can have zero-to-many prices. A price tag can be linked to zero-to-many-products.
2.  Along with the product UPC, we include the product name (for most products, for some it will be missing).
3.  Use the product's brand and packaging as potential indicators for which prices it belongs to. We have extracted text from some price tags that potentially signals to which product or product group the price tag belongs. Cross-reference the `product_metadata` on each price tag with the set of identified products to help formulate your decision
    *   More often than not, products of the same packaging in the scene will have the *same* price.
    *   More often than not, products of the same brand but different packaging will have *different* prices.
4.  A single UPC will not have more than one price tag of the same *price_type*. For example, if there are two `REGULAR` price tags (i.e. "$1.99" and "$2.99"), a single UPC *cannot* be both "$1.99" and "$2.99".
    *   NOTE: it is totally plausible for a single UPC to have multiple prices of different *price_types*
5. If you are unsure about a specific pair, do not include the ID in your response. Prioritize being conservative and accurate over returning every pair candidate ID.

# Examples

The data will be given as a list of potentially associated product-price pairs. The `product` key in each object of the list indicates the candidate product. A `upc` is a product's unique code or UPC. The `price` key indicates the possible price.

### True association
```json
{{
  "product": {{
    "upc": "070847811169",
    "name": "Monster Original 16oz Can"
  }},
  "price": {{
    "price_type": "STANDARD",
    "price_contents": "$3.29",
    "more_info": "Single Can Energy Drinks"
  }}
}}
```

### False association
```json
{{
  "product": {{
    "upc": "070847811169",
    "name": "Monster Original 16oz Can"
  }},
  "price": {{
    "price_type": "STANDARD",
    "price_contents": "$7.99",
    "more_info": "Coke 12 packs"
  }}
}}
```

### More Examples

If given the list of pairs:
```json
[
  {{
    "id": "1",
    "product": {{
      "upc": "070847811169",
      "name": "Monster Original 16oz Can"
    }},
    "price": {{
      "price_type": "STANDARD",
      "price_contents": "$3.29",
      "more_info": "Single Can Energy Drinks"
    }}
  }}, 
  {{
    "id": "2",
    "product": {{
      "upc": "070847811169",
      "name": "Monster Original 16oz Can"
    }},
    "price": {{
      "price_type": "STANDARD",
      "price_contents": "$7.99",
      "more_info": "Coke 12 packs"
    }}
  }}
]
```

The output would be:
```json
[
  "1",
]
```

If given the pairs:
```json
[
  {{
    "id": "1",
    "product": {{
      "upc": "012000001598",
      "name": "Aquafina 20oz Bottle"
    }},
    "price": {{
      "price_type": "STANDARD",
      "price_contents": "$3.29",
      "more_info": "Single Can Energy Drinks"
    }}
  }}, 
  {{
    "id": "2",
    "product": {{
      "upc": "611269182460",
      "name": "Red bull Blueberry 12oz Can"
    }},
    "price": {{
      "price_type": "STANDARD",
      "price_contents": "$3.29",
      "more_info": "Reb Bull Energy Drinks"
    }}
  }}, 
  {{
    "id": "3",
    "product": {{
      "upc": "078000098402",
      "name": "Dr. Pepper Cherry 20oz Bottle"
    }},
    "price": {{
      "price_type": "STANDARD",
      "price_contents": "$3.99",
      "more_info": "Dr. Pepper"
    }}
  }}
]
```

The output would be:
```json
[
  "2",
  "3",
]
```



PRODUCT-PRICE PAIR CANDIDATES:
```json
{pairs}
```

Output your answer in JSON and nothing else: